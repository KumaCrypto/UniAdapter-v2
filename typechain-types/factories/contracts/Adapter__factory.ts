/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Adapter, AdapterInterface } from "../../contracts/Adapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "_router",
        type: "address",
      },
      {
        internalType: "contract IUniswapV2Factory",
        name: "_factory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "LiquidityAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "pair",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    name: "LiquidityRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "SwappedExactTokensForTokens",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "SwappedTokensForExactTokens",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IUniswapV2Factory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapTokensForExactTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162001841380380620018418339810160408190526100319161007d565b600180546001600160a01b039283166001600160a01b031991821617909155600080549390921692169190911790556100b7565b6001600160a01b038116811461007a57600080fd5b50565b6000806040838503121561009057600080fd5b825161009b81610065565b60208401519092506100ac81610065565b809150509250929050565b61177a80620000c76000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063c45a015511610076578063e6a439051161005b578063e6a4390514610164578063e8e3370014610177578063f887ea401461018a57600080fd5b8063c45a01551461010c578063d06ca61f1461015157600080fd5b80631f00ca74146100a857806338ed1739146100d15780638803dbee146100e6578063baa2abde146100f9575b600080fd5b6100bb6100b6366004611106565b6101aa565b6040516100c8919061118d565b60405180910390f35b6100e46100df3660046111c5565b610272565b005b6100e46100f43660046111c5565b61045f565b6100e4610107366004611238565b61069e565b60015461012c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b6100bb61015f366004611106565b6108d1565b61012c6101723660046112aa565b61092c565b6100e46101853660046112e3565b6109c9565b60005461012c9073ffffffffffffffffffffffffffffffffffffffff1681565b6000546040517f1f00ca7400000000000000000000000000000000000000000000000000000000815260609173ffffffffffffffffffffffffffffffffffffffff1690631f00ca7490610205908790879087906004016113aa565b600060405180830381865afa158015610222573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261026891908101906113fc565b90505b9392505050565b6102be3330888787600081811061028b5761028b6114d8565b90506020020160208101906102a09190611507565b73ffffffffffffffffffffffffffffffffffffffff16929190610b88565b61032860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687868660008181106102f6576102f66114d8565b905060200201602081019061030b9190611507565b73ffffffffffffffffffffffffffffffffffffffff169190610c6a565b6000546040517f38ed173900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906338ed17399061038890899089908990899089908990600401611524565b6000604051808303816000875af11580156103a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103ed91908101906113fc565b508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5dd88e39e619cf4af6a1062dedd5e81e43701e5e4def8d8c06f2ccd7195c1c4686868a60405161044f9392919061156f565b60405180910390a3505050505050565b6104783330878787600081811061028b5761028b6114d8565b6104b060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686868660008181106102f6576102f66114d8565b60008367ffffffffffffffff8111156104cb576104cb6113cd565b6040519080825280602002602001820160405280156104f4578160200160208202803683370190505b506000546040517f8803dbee00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff1690638803dbee90610556908a908a908a908a908a908a90600401611524565b6000604051808303816000875af1158015610575573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105bb91908101906113fc565b905061062c33826000815181106105d4576105d46114d8565b6020026020010151886105e79190611593565b878760008181106105fa576105fa6114d8565b905060200201602081019061060f9190611507565b73ffffffffffffffffffffffffffffffffffffffff169190610df6565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa9bb003ba0992105f4e6a74bfa0105e74ea76c70b276e72e671fc2bb2e9e079d87878560405161068d939291906115d1565b60405180910390a350505050505050565b6001546040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301528881166024830152600092169063e6a4390590604401602060405180830381865afa158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b9190611601565b905061075f73ffffffffffffffffffffffffffffffffffffffff8216333089610b88565b6000546107869073ffffffffffffffffffffffffffffffffffffffff838116911688610c6a565b6000546040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152898116602483015260448201899052606482018890526084820187905285811660a483015260c482018590529091169063baa2abde9060e40160408051808303816000875af1158015610823573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610847919061161e565b50508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f94f1f3125c0ce3e87e73be7798f37f42710fa4c304b51ee82698965e200afa73896040516108bf91815260200190565b60405180910390a45050505050505050565b6000546040517fd06ca61f00000000000000000000000000000000000000000000000000000000815260609173ffffffffffffffffffffffffffffffffffffffff169063d06ca61f90610205908790879087906004016113aa565b6001546040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528381166024830152600092169063e6a4390590604401602060405180830381865afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b9190611601565b6109eb73ffffffffffffffffffffffffffffffffffffffff8916333089610b88565b610a0d73ffffffffffffffffffffffffffffffffffffffff8816333088610b88565b600054610a349073ffffffffffffffffffffffffffffffffffffffff8a8116911688610c6a565b600054610a5b9073ffffffffffffffffffffffffffffffffffffffff898116911687610c6a565b6000546040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152898116602483015260448201899052606482018890526084820187905260a4820186905284811660c483015260e482018490529091169063e8e3370090610104016060604051808303816000875af1158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b259190611642565b50506040805173ffffffffffffffffffffffffffffffffffffffff8b811682528a811660208301528516925033917f96780a916c0411d7aa2b5d57c54a25b2493e6baa845ddeb2d2f659cd55456fcf910160405180910390a35050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610c649085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e4c565b50505050565b801580610d0a57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190611670565b155b610d9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610df19084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610be2565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610df19084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610be2565b6000610eae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f589092919063ffffffff16565b805190915015610df15780806020019051810190610ecc9190611689565b610df1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610d92565b606061026884846000858573ffffffffffffffffffffffffffffffffffffffff85163b610fe1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d92565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161100a91906116d7565b60006040518083038185875af1925050503d8060008114611047576040519150601f19603f3d011682016040523d82523d6000602084013e61104c565b606091505b509150915061105c828286611067565b979650505050505050565b6060831561107657508161026b565b8251156110865782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9291906116f3565b60008083601f8401126110cc57600080fd5b50813567ffffffffffffffff8111156110e457600080fd5b6020830191508360208260051b85010111156110ff57600080fd5b9250929050565b60008060006040848603121561111b57600080fd5b83359250602084013567ffffffffffffffff81111561113957600080fd5b611145868287016110ba565b9497909650939450505050565b600081518084526020808501945080840160005b8381101561118257815187529582019590820190600101611166565b509495945050505050565b60208152600061026b6020830184611152565b73ffffffffffffffffffffffffffffffffffffffff811681146111c257600080fd5b50565b60008060008060008060a087890312156111de57600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561120357600080fd5b61120f89828a016110ba565b9095509350506060870135611223816111a0565b80925050608087013590509295509295509295565b600080600080600080600060e0888a03121561125357600080fd5b873561125e816111a0565b9650602088013561126e816111a0565b955060408801359450606088013593506080880135925060a0880135611293816111a0565b8092505060c0880135905092959891949750929550565b600080604083850312156112bd57600080fd5b82356112c8816111a0565b915060208301356112d8816111a0565b809150509250929050565b600080600080600080600080610100898b03121561130057600080fd5b883561130b816111a0565b9750602089013561131b816111a0565b965060408901359550606089013594506080890135935060a0890135925060c0890135611347816111a0565b8092505060e089013590509295985092959890939650565b8183526000602080850194508260005b85811015611182578135611382816111a0565b73ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161136f565b8381526040602082015260006113c460408301848661135f565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561140f57600080fd5b825167ffffffffffffffff8082111561142757600080fd5b818501915085601f83011261143b57600080fd5b81518181111561144d5761144d6113cd565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715611490576114906113cd565b6040529182528482019250838101850191888311156114ae57600080fd5b938501935b828510156114cc578451845293850193928501926114b3565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561151957600080fd5b813561026b816111a0565b86815285602082015260a06040820152600061154460a08301868861135f565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b60408152600061158360408301858761135f565b9050826020830152949350505050565b6000828210156115cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b6040815260006115e560408301858761135f565b82810360208401526115f78185611152565b9695505050505050565b60006020828403121561161357600080fd5b815161026b816111a0565b6000806040838503121561163157600080fd5b505080516020909101519092909150565b60008060006060848603121561165757600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561168257600080fd5b5051919050565b60006020828403121561169b57600080fd5b8151801515811461026b57600080fd5b60005b838110156116c65781810151838201526020016116ae565b83811115610c645750506000910152565b600082516116e98184602087016116ab565b9190910192915050565b60208152600082518060208401526117128160408501602087016116ab565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220ec5c833b64d21bcf6089939caeb7bd1270d73ce54f565368c96c2ed9ed2b620d64736f6c634300080d0033";

type AdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Adapter__factory extends ContractFactory {
  constructor(...args: AdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _router: string,
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Adapter> {
    return super.deploy(_router, _factory, overrides || {}) as Promise<Adapter>;
  }
  override getDeployTransaction(
    _router: string,
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_router, _factory, overrides || {});
  }
  override attach(address: string): Adapter {
    return super.attach(address) as Adapter;
  }
  override connect(signer: Signer): Adapter__factory {
    return super.connect(signer) as Adapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdapterInterface {
    return new utils.Interface(_abi) as AdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Adapter {
    return new Contract(address, _abi, signerOrProvider) as Adapter;
  }
}
